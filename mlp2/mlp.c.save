#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <float.h>
#include <time.h>
#include <unistd.h>
 
#define DEBUG 1
#if DEBUG
#define __USE_GNU
#include <fenv.h>       /* enable floating exceptions */
unsigned long Where;    // debugging counter
#endif

#include "rand.c"

#define TEST_PLOT 0 // if 1, does not produce frequency distribution and traits graphs for test group
#define TestH 0                  // test polity interested in
#define TestG 4                  // test group interested in

#define CLUSTER 0            // is this simulation on cluster yes or no (1 or 0)
#define SKIP 1           // time interval between snapshot of states
#define STU 500             // summary time period for simulation

#define AVERAGE_GRAPH_ONLY 0  // if 1, generate only average graphs and supress individual run graphs
#define ALLDATAFILE 0        // if 1, generate all data files for individual runs and summary too 
#define GRAPHS      0        // if 1, saves graphs as png files 

#define INIT_COM_EFFORT rnd(2)              // 0 or 1
#define INIT_LEAD_EFFORT 0
#define INIT_CHIEF_EFFORT 0

#define INIT_CHIEF_PUN_EFFORT 0
#define INIT_LEAD_PUN_EFFORT U01()
// change values to 0 if update strategy for any one of commoner or lead or chief is to be turned off
#define UPDATE_COM 1
#define UPDATE_LEAD_EFFORT 0
#define UPDATE_CHIEF_EFFORT 0

#define UPDATE_LEAD_PUN_EFFORT 1
#define UPDATE_CHIEF_PUN_EFFORT 0


#define TURNOFF_RUNS_DATA 1            // does not store individual runs dynamics data files in cluster

// strategy update options and values
// option_set = {random_mutation, selective_copy, optimization}
// strategy update option set for each level = {option1_set, option2_set, option_3_set, ...}
double Vc[][3] = { {0.01, 0.24, 0.0}, {0.00, 0.00, 0.25} }; // commoner strategy update method probability sets for different options (1, 2, 3)
double Vl[][3] = { {0.01, 0.24, 0.0}, {0.01, 0.24, 0.0} };  // leader strategy update method probability sets for different options (1, 2, 3)
double Vcf[][3] = { {0.01, 0.24, 0.0}, {0.01, 0.24, 0.0} };  // chief strategy update method probability sets for different options (1, 2, 3)

#define GP 1 // 1, 2, 3; uses different calculation for group production
#define PS 1 // 1, 2, 3; uses different calculation for polity strength

void *Malloc(size_t size)
{
  void *p = malloc(size);

  if (p) return p;
  printf("malloc failed\n");
  _exit(2);
}

#define malloc(x) Malloc(x) 

void *Calloc(size_t nmemb, size_t size)
{
  void *p = calloc(nmemb, size);

  if (p) return p;
  printf("calloc failed\n");
  _exit(3);
}

#define calloc(x,y) Calloc(x,y) 

#define MAX(x,y)         (((x)>(y))? (x): (y))
#define MIN(x,y)         (((x)<(y))? (x): (y))

typedef struct
{
  double        pi;           // payoff   
  unsigned int  x;            // 1 or 0 
  double        k;            // punishment incurred from leader
} Commoner;

typedef struct
{
  double        pi;           // payoff 
  double        y;            // coordination effort
  double        p;            // punishment effort to punish commoners
  double        K;            // punishment incurred from chief
  double        d_l;          // small delta 
  
} Leader;

typedef struct
{
  double        pi;           // payoff 
  double        z;            // coordination effort
  double        q;            // punishment effort    
  double        d_c;          // capital delta
} Chief;

typedef struct
{
  double        P;            // group production
  double        X;            // sum of efforts from commoners in group
  double        t_u;          // theta_u: tax on commoners in a group 
  double        t_d;          // theta_d: rewards to commoner
  unsigned int  nc;           // number of commoners in a group
  Leader        *lead;        // leader
  Commoner      *com;         // group members / commoners; 
} group;

typedef struct
{
  unsigned int ng;            // no. of groups in a polity   
  double       e_u;           // tax  on leaders
  double       e_d;           // rewards to leaders
  double       SY;            // sum of production from all groups in a polity
  double       Q;             // 
  group        *g;            // polity members  
  Chief        *chief;        // chief;
  
} polity;

polity *Polity;               // "system structure"

// Global variables
/** configuration parameters **/
unsigned Seed;                    // Seed: Seed of psuedorandom number passed
unsigned long Seed_i;             // Seed_i: seed of each run
unsigned int Runs;                         // no. of runs
unsigned int G;                            // no. of groups
unsigned int n;                            // no. of commoners
unsigned int H;                            // no. of politites
unsigned int T;                            // max time of simulation
unsigned int Lambda;                       // error suppression
double Theta_u, Theta_d, Eta_u, Eta_d, Theta_ua, Theta_da, Eta_ua, Eta_da;     // taxes / rewards
double cx, cy, cz, cp, cq;                // cost parameter
double b, B;                      // expected benefit for a game
double Sigma;                     // standard deviation for distribution of mutation for contribution
double Sigma_t;                   // standard deviation for distribution of mutation for tax levels
double x_0, y_0, z_0, Y0, X0;     // x_0: half effort of commoner; y_0: half effort of leader; z_0: half effort of chief; Y0: half strength of polity
double e, E;                      // e: leader efficiency; E: chief efficiency
double k, K, delta, DELTA;        // punishments parameter
unsigned int L;                         // no. of least productive leaders to be punished by a chief 
double m;                         // probability of migration
unsigned int Vop;                       // strategy update set option (1, 2, 3)
double Rho;                       // probability that polity would go to us vs them game 
unsigned int *UvT;                // keep list of index if polities participate in usvsthem game or not

// statistical variables
double *xmean;          // average effort by individuals
double *ymean;            // average effort by leaders
double *zmean;            // average effort by chiefs
double *pi0mean;                  // average payoff of commoners
double *pi1mean;                  // average payoff of leaders
double *pi2mean;                  // average payoff of chiefs
double *pmean;                    // average punishment effort of leaders
double *qmean;                    // average punishment effort of chiefs
double *TUmean;                    // average tax on commoners
double *EUmean;                    // average tax on leaders
double *TDmean;                    // average rewards to commoners
double *EDmean;                    // average rewards to leaders
double *Pmean;                    // group production
double *Qmean;                    // production to leader per each commoner

dist *Vcdist, *Vldist, *Vcfdist;                      // 'dist' is defined in rand.c; Probability distribution of choosing method of changing efforts and tax levels 

double LOG_FLT_MAX;

#define EXPECT(a,b,c) if ((a) != fscanf(f, " " b "%*[^\n]",c)){ fclose(f); printf("Error: %s\n",b); return 1; }

int read_config(char *file_name)
{
  FILE *f;

  if (!(f = fopen(file_name,"r"))) return 1;
  EXPECT(1, "unsigned Seed      = %u;", &Seed);
  EXPECT(1, "int      Runs      = %d;", &Runs);
  EXPECT(1, "int      T         = %d;", &T);
  EXPECT(1, "int      Lambda    = %d;", &Lambda);
  
  EXPECT(1, "int      n         = %d;", &n);
  EXPECT(1, "int      G         = %d;", &G);  
  EXPECT(1, "int      H         = %d;", &H);
  
  EXPECT(1, "double   b         = %lf;", &b);  
  EXPECT(1, "double   B         = %lf;", &B);   
  EXPECT(1, "double   cx        = %lf;", &cx);
  EXPECT(1, "double   cy        = %lf;", &cy);
  EXPECT(1, "double   cz        = %lf;", &cz);     
  EXPECT(1, "double   cp        = %lf;", &cp);
  EXPECT(1, "double   cq        = %lf;", &cq);     
  
  EXPECT(1, "unsigned L         = %u;", &L);
  EXPECT(1, "double   k         = %lf;", &k);
  EXPECT(1, "double   K         = %lf;", &K);
  EXPECT(1, "double   delta     = %lf;", &delta);
  EXPECT(1, "double   DELTA     = %lf;", &DELTA);
  
  EXPECT(1, "double   Theta_ua  = %lf;", &Theta_ua);
  EXPECT(1, "double   Theta_da  = %lf;", &Theta_da);
  EXPECT(1, "double   Eta_ua    = %lf;", &Eta_ua);
  EXPECT(1, "double   Eta_da    = %lf;", &Eta_da);  

  EXPECT(1, "unsigned Vop       = %d;", &Vop);
  EXPECT(1, "double   m         = %lf;", &m); 
  EXPECT(1, "double   Rho       = %lf;", &Rho)
  
  EXPECT(1, "double   x0        = %lf;", &x_0);
  EXPECT(1, "double   y0        = %lf;", &y_0);
  EXPECT(1, "double   z0        = %lf;", &z_0);
  EXPECT(1, "double   X0        = %lf;", &X0);
  EXPECT(1, "double   Y0        = %lf;", &Y0);  
  
  EXPECT(1, "double   e         = %lf;", &e);
  EXPECT(1, "double   E         = %lf;", &E);
  
  EXPECT(1, "double   Sigma     = %lf;", &Sigma);
  EXPECT(1, "double   Sigma_t   = %lf;", &Sigma_t);    

  fclose(f);   
  
  if (Runs < 1) exit(1);
  return 0;
}
#undef EXPECT

void prep_file(char *fname, char *apndStr)
/*
 * fname: variable in which name of file to be stored
 * apndStr: string to be appended to file name string
 */
{
  sprintf(fname, "g%02dla%dn%02db%0.2fB%.2fk%0.2fdl%.2ftu%.2ftd%.2feu%.2fed%.2fcx%.2fcy%.2fcz%.2fcp%.2fcq%.2fVop%dRho%.2fY0%.2fX0%.2fe%.2fE%.2fx0%.2fy0%.2fz0%.2f%s", G, Lambda, n, b, B, k, delta, Theta_ua, Theta_da, Eta_ua, Eta_da, cx, cy, cz, cp, cq, Vop, Rho, Y0, X0, e, E, x_0, y_0, z_0, apndStr);
}

// generates random number following exponential distribution
double randexp(double lambda)
/*
 * lambda: rate parameter of exponential distribution
 */
{
  return -log(1.0-U01()) / lambda;  
}

// merge sort
void merge (double *a, int n, int m) {
    int i, j, k;
    double *x = malloc(n * sizeof(double));
    for (i = 0, j = m, k = 0; k < n; k++) {
        x[k] = j == n      ? a[i++]
             : i == m      ? a[j++]
             : a[j] < a[i] ? a[j++]
             :               a[i++];
    }
    for (i = n; i--;) {
        a[i] = x[i];
    }
    free(x);
}
 
void merge_sort (double *a, int n) {
    if (n < 2)
        return;
    int m = n>>1;   // divide by 2
    merge_sort(a, m);
    merge_sort(a + m, n - m);
    merge(a, n, m);
}

void merge_key_value (int *a, double *v,  int n, int m) {
    int i, j, k;
    int *x = malloc(n * sizeof(int));
    for (i = 0, j = m, k = 0; k < n; k++) {
        x[k] = j == n      ? a[i++]
             : i == m      ? a[j++]
             : v[a[j]] < v[a[i]] ? a[j++]
             :               a[i++];
    }
    for (i = n; i--;) {
        a[i] = x[i];
    }
    free(x);
}

void merge_sort_key_value (int *a, double *v, int n) {
    if (n < 2)
        return;
    int m = n>>1;   // divide by 2
    merge_sort_key_value(a, v, m);
    merge_sort_key_value(a + m, v, n - m);
    merge_key_value(a, v, n, m);
} 

// allocate memory for Polity system
void setup()
{
  int h, j;
  group *gr;
  // allocate memory for Polity and groups and commoners
  Polity = malloc(H*sizeof(polity));
  for(h = 0; h < H; h++){                                            // through all polities
    (Polity+h)->chief = malloc(sizeof(Chief));                 // allocate memory for chief
    (Polity+h)->g = malloc(G*sizeof(group));                          // allocate memory for groups in each polity    
    for(j = 0; j < G; j++){                                          // through all groups in a polity
      gr = (Polity+h)->g+j;                                             // get reference to group pointer
      gr->lead = malloc(sizeof(Leader));                       // allocate memory for leader in a group
      gr->com = malloc(n*sizeof(Commoner));                          // allocate memory for commoners in a group
    }
  }
  Vcdist = allocdist(4);                                              // allocate memory for distribution for update strategy method
  Vldist = allocdist(4);                                              // allocate memory for distribution for update strategy method
  Vcfdist = allocdist(4);                                              // allocate memory for distribution for update strategy method
  UvT = malloc(H*sizeof(unsigned int));  
}

void allocStatVar()
{
  // allocate memory to store statistics points of snapshot along time period of simulaltion
  xmean = calloc((int)(T/SKIP+1), sizeof(double));         // for effort by commoners
  ymean = calloc((int)(T/SKIP+1), sizeof(double));         // for effort by leaders
  zmean = calloc((int)(T/SKIP+1), sizeof(double));         // for effort by chiefs
  pi0mean = calloc((int)(T/SKIP+1), sizeof(double));                   // for payoff of commoners
  pi1mean = calloc((int)(T/SKIP+1), sizeof(double));                   // for payoff of leaders
  pi2mean = calloc((int)(T/SKIP+1), sizeof(double));                   // for payoff of chiefs
  pmean = calloc((int)(T/SKIP+1), sizeof(double));                     // for punishment effort by leaders 
  qmean = calloc((int)(T/SKIP+1), sizeof(double));                     // for punishment effort by chiefs
  TUmean = calloc((int)(T/SKIP+1), sizeof(double));                    // for tax paid by commoners to leaders
  EUmean = calloc((int)(T/SKIP+1), sizeof(double));                    // for tax paid by leaders to chiefs
  TDmean = calloc((int)(T/SKIP+1), sizeof(double));                    // for tax paid by commoners to leaders
  EDmean = calloc((int)(T/SKIP+1), sizeof(double));                    // for tax paid by leaders to chiefs
  Pmean = calloc((int)(T/SKIP+1), sizeof(double));                    // for group production 
  Qmean = calloc((int)(T/SKIP+1), sizeof(double));                    // for polity production // singling out B from BQ    
}

void cleanup()                                                       // cleans Polity system memory
{
  int h, j;
  group *gr;
  for(h = 0; h < H; h++){                                            // through all polities
    for(j = 0; j < G; j++){                                          // through all groups in a polity
      gr = (Polity+h)->g+j;                                          // get reference to group pointer
      free(gr->lead); 
      free(gr->com);
    }
    free((Polity+h)->g);
    free((Polity+h)->chief);    
  }
  free(Polity);
  freedist(Vcdist); freedist(Vldist); freedist(Vcfdist); 
  free(UvT);
}

void clearStatVar()
{
  free(xmean); free(ymean); free(zmean); free(pi0mean); free(pi1mean); free(pi2mean); free(pmean); free(qmean);
  free(TUmean); free(EUmean); free(TDmean); free(EDmean);
  free(Pmean); free(Qmean);   
}

/***************************************Statistics calcualtions and writing to file*******************************************************/
/*****************************************************************************************************************************************/

// calculates all the stats
void calcStat(int k, int r) 
{
  double xm = 0, ym = 0, zm = 0, p0m = 0, p1m = 0, p2m = 0, tum = 0, tdm = 0, eum = 0, edm = 0, pm = 0, qm = 0, Pm = 0, Qm =  0;
  int h, j, i, ncm, nl, ncf;  
  polity *p;
  group *g;
  Commoner *com;
  Leader *ld;
  Chief *chief;
// #if !CLUSTER
  //FILE *fx, *fy, *fz, *fp0, *fp1, *fp2, *ft, *fe;
//   char fname[100];
//   
//   if(k== (T/SKIP)){                                // data files for freq. distribution
//     sprintf(fname, "x_%d.dat", r);
//     fx = fopen(fname, "w");   
//     sprintf(fname, "y_%d.dat", r);
//     fy = fopen(fname, "w");
//     sprintf(fname, "z_%d.dat", r);
//     fz = fopen(fname, "w");
//     sprintf(fname, "t_%d.dat", r);
//     ft = fopen(fname, "w");
//     sprintf(fname, "e_%d.dat", r);
//     fe = fopen(fname, "w");
//     sprintf(fname, "p0_%d.dat", r);
//     fp0 = fopen(fname, "w");
//     sprintf(fname, "p1_%d.dat", r);
//     fp1 = fopen(fname, "w");
//     sprintf(fname, "p2_%d.dat", r);
//     fp2 = fopen(fname, "w");
//     
//   }
// #endif

#if (!TURNOFF_RUNS_DATA || !CLUSTER )
  static FILE **fp = NULL;  // file pointers for individual run  
  if(k < 0){
    for (h = 5; h--; fclose(fp[h]));
    free(fp); 
    return;
  }     
  
  if(!k){   
    char ixdata[200], ipdata[200], itdata[200], igpdata[200], ipundata[200], tstr[100];
    fp = malloc(5*sizeof(FILE *));    
    sprintf(tstr, "x%d.dat", r); prep_file(ixdata, tstr);    
    sprintf(tstr, "p%d.dat", r); prep_file(ipdata, tstr);    
    sprintf(tstr, "t%d.dat", r); prep_file(itdata, tstr);    
    sprintf(tstr, "gp%d.dat", r); prep_file(igpdata, tstr); 
    sprintf(tstr, "pun%d.dat", r); prep_file(ipundata, tstr);
    fp[0] = fopen(ixdata, "w");
    fp[1] = fopen(ipdata, "w");
    fp[2] = fopen(itdata, "w");  
    fp[3] = fopen(igpdata, "w");
    fp[4] = fopen(ipundata, "w");
    
    // write headers       
    fprintf(fp[0], "0 \t com\tlead\tchief\n");
    fprintf(fp[1], "0 \t com\tlead\tchief\n");
    fprintf(fp[2], "0 \t theta_u \t theta_d \t eta_u \t eta_d\n");
    fprintf(fp[3], "0\tP\tQ\n");
    fprintf(fp[4], "0\tp\tq\n");
  }
#endif
  // calculate stat of traits
  for(h = 0; h < H; h++){                                                               // through all polities
    p = Polity+h;
    for(j = 0; j < p->ng; j++){                                                         // through all groups
      g = p->g+j;
      for(i = 0; i < g->nc; i++){                                                       // through all commoners
	com = g->com+i;
	xm += com->x;                                                                // sum of commoner's effort
	p0m += com->pi;                                                                 // sum of commoner's payoff
// #if !CLUSTER
// 	if(k== (T/SKIP)){
// 	  fprintf(fx, "%.6lf\n", (double)com->x);
// 	  fprintf(fp0, "%.6lf\n", com->pi);
// 	}
// #endif
      }      
      // leader stats
      ld = g->lead;                                                                // ind == leader
      ym += ld->y;                                                                // sum of leader's efforts
      p1m += ld->pi;                                                                 // sum of leader's payoff
      pm += ld->p;                                                                   // sum of leader's punishment effort
      tum += g->t_u;                                                                   // sum of tax factor theta_u on commoners
      tdm += g->t_d;                                                                   // sum of reward factor theta_d on commoners
/*#if !CLUSTER
      if(k== (T/SKIP)){
	fprintf(fy, "%.6lf\n", ld->y);
	fprintf(fp1, "%.6lf\n", ld->pi);     
	fprintf(ft, "%.6lf \t %.6lf\n", g->t_u, g->t_d);
      }
#endif   */  
      Pm += g->P;                                                                     // sum P over all groups        
    }
    // chief's stat
    chief = p->chief+0;
    zm += chief->z;                                                               // sum of chief's efforts
    p2m += chief->pi;
    qm += chief->q;                                                                         // sum of chief's punishment effort in each polity
    eum += p->e_u;                                                                       // sum of tax on leaders by chiefs in polity
    edm += p->e_d;                                                                       // sum of tax on leaders by chiefs in polity
    Qm += p->Q;    
    
// #if !CLUSTER
//     if(k== (T/SKIP)){
//       fprintf(fz, "%.6lf\n", (chief)->z);
//       fprintf(fp2, "%.6lf\n", (chief)->pi);
//       fprintf(fe, "%.6lf \t  %.6lf\n", p->e_u, p->e_d);
//     }
// #endif
  }
  // compute averages of traits
  ncm = H*G*n;         // total no. of commoners in system
  nl  = H*G;           // total no. of leaders in system
  ncf = H;             // total no. of chiefs in system
  
  xm /= ncm; 
  p0m /= ncm;
  
  ym /= nl;
  p1m /= nl;
  tum /= nl;
  tdm /= nl;
  pm  /= nl;  
  
  zm /= ncf;
  p2m /= ncf;  
  qm /= ncf;  
  eum /= ncf;  
  edm /= ncf; 
  
  Pm /= nl;        
  Qm /= ncf;    
  
  // store in averages in variable as sum to average it after multiple runs
  xmean[k] += xm;
  ymean[k] += ym;
  zmean[k] += zm;
  pi0mean[k] += p0m;
  pi1mean[k] += p1m;
  pi2mean[k] += p2m;
  pmean[k] += pm;
  qmean[k] += qm;
  TUmean[k] += tum;
  TDmean[k] += tdm;
  EUmean[k] += eum;
  EDmean[k] += edm;
  Pmean[k] += Pm;
  Qmean[k] += Qm;  
#if (!TURNOFF_RUNS_DATA || !CLUSTER )
  // write data for individual runs
  fprintf(fp[0], "%d  %.4lf  %.4lf  %.4lf\n", k, xm, ym, zm);
  fprintf(fp[1], "%d  %.4lf  %.4lf  %.4lf\n", k, p0m, p1m, p2m);
  fprintf(fp[2], "%d  %.4lf  %.4lf  %.4lf  %.4lf\n", k, tum, tdm, eum, edm);  
  fprintf(fp[3], "%d  %.4lf  %.4lf\n", k, Pm, Qm); 
  fprintf(fp[4], "%d  %.4lf  %.4lf\n", k, pm, qm); 
#endif
#if !CLUSTER
  // print final values for each run
  if(k == T/SKIP){
    printf("run#%d \t%.4lf \t%.4lf \t%.4lf \t%.4lf \t%.4lf \t%.4lf \t%.4lf \t%.4lf \t%.4lf  %.4lf  %.4lf  %.4lf  %.4lf  %.4lf  %lu\n", r, xm, ym, zm, pm, qm, tum, tdm, eum, edm, p0m, p1m, p2m, Pm, Qm, Seed_i);  
//     fclose(fx); fclose(fy); fclose(fz); fclose(ft); fclose(fe); fclose(fp0); fclose(fp1); fclose(fp2);
  }
  
#endif
}

void writeDataToFile()
{
  int j;
  char xdata[200], pdata[200], tdata[200], gpdata[200], pundata[200];
  FILE **fp = malloc(10*sizeof(FILE *));    
  prep_file(xdata, "x.dat");    
  prep_file(pdata, "p.dat");    
  prep_file(tdata, "t.dat");   
  prep_file(gpdata, "gp.dat");
  prep_file(pundata, "pun.dat");
  fp[0]= fopen(xdata, "w");
  fp[1]= fopen(pdata, "w");
  fp[2]= fopen(tdata, "w");
  fp[3]= fopen(gpdata, "w");
  fp[4]= fopen(pundata, "w");
#if ALLDATAFILE
  int stu = (T-STU)/SKIP;
  double xsum = 0, ysum = 0, zsum = 0, p0sum = 0, p1sum = 0, p2sum =0, t_usum = 0, e_usum = 0, t_dsum = 0, e_dsum = 0, psum = 0, qsum = 0, Psum = 0;  
#endif  
  // write headers
  fprintf(fp[0], "0 \t com\tlead\tchief\n");
  fprintf(fp[1], "0 \t com\tlead\tchief\n");
  fprintf(fp[2], "0 \t theta_u \t theta_d \t eta_u \t eta_d \n");
  fprintf(fp[3], "0 \t P \t Q\n");
  fprintf(fp[4], "0 \t p \t q\n");
  
  for(j = 0; j < (int)(T/SKIP)+1; j++){
    // average accumulated mean values for multiple runs
    xmean[j] /= (double)Runs;
    ymean[j] /= (double)Runs;
    zmean[j] /= (double)Runs;
    pi0mean[j] /= (double)Runs;
    pi1mean[j] /= (double)Runs;
    pi2mean[j] /= (double)Runs;
    pmean[j] /= (double)Runs;
    qmean[j] /= (double)Runs;
    TUmean[j] /= (double)Runs;
    TDmean[j] /= (double)Runs;
    EUmean[j] /= (double)Runs;
    EDmean[j] /= (double)Runs;
    Pmean[j] /= (double)Runs;
    Qmean[j] /= (double)Runs;    
    // write data to file
    fprintf(fp[0], "%d  %.4lf  %.4lf  %.4lf\n", j, xmean[j], ymean[j], zmean[j]);
    fprintf(fp[1], "%d  %.4lf  %.4lf  %.4lf\n", j, pi0mean[j], pi1mean[j], pi2mean[j]);
    fprintf(fp[2], "%d  %.4lf  %.4lf  %.4lf  %.4lf\n", j, TUmean[j], TDmean[j], EUmean[j], EDmean[j]); 
    fprintf(fp[3], "%d  %.4lf  %.4lf\n", j, Pmean[j], Qmean[j]);
    fprintf(fp[4], "%d  %.4lf  %.4lf\n", j, pmean[j], qmean[j]);    
    
#if ALLDATAFILE
    if(j < stu) continue;
    xsum += xmean[j];
    ysum += ymean[j];
    zsum += zmean[j];
    p0sum += pi0mean[j];
    p1sum += pi1mean[j];
    p2sum += pi2mean[j];
    t_usum += TUmean[j];
    t_dsum += TDmean[j];
    e_usum += EUmean[j];
    e_dsum += EDmean[j];
    psum += pmean[j];
    qsum += qmean[j];
    Psum += Pmean[j];
#endif
  }
  for(j = 0; j < 5; j++){
    fclose(fp[j]);
  } 
#if ALLDATAFILE
  double st = STU/SKIP + 1;
  xsum /= st; ysum /= st; zsum /= st; p0sum /= st; p1sum /= st; p2sum /= st; 
  t_usum /= st; t_dsum /= st; e_usum /= st; e_dsum /= st;                // computing average over summary period time
  psum /= st; qsum /= st;  // todo: Psum /= st; Qsum /= st; 
  // write data to file
  char  xsumdata[200], psumdata[200], tsumdata[200], punsumdata[200], Psumdata[200];
  prep_file(xsumdata, "xsum.dat");    
  prep_file(psumdata, "psum.dat");    
  prep_file(tsumdata, "tsum.dat");  
  prep_file(punsumdata, "punsum.dat"); 
  prep_file(Psumdata, "Psum.dat");
  fp[5]= fopen(xsumdata, "w");
  fp[6]= fopen(psumdata, "w");
  fp[7]= fopen(tsumdata, "w");
  fp[8]= fopen(punsumdata, "w");
  fp[9]= fopen(Psumdata, "w");
  // write headers  
  fprintf(fp[5], "com\tlead\tchief\n");
  fprintf(fp[6], "com\tlead\tchief\n");
  fprintf(fp[7], "theta_u \t theta_d \t eta_u \t eta_d\n");
  fprintf(fp[8], "p \t q \n"); 
  fprintf(fp[9], "P \n");
     
  fprintf(fp[5], "%.4lf  %.4lf  %.4lf\n", xsum, ysum, zsum);
  fprintf(fp[6], "%.4lf  %.4lf  %.4lf\n", p0sum, p1sum, p2sum);
  fprintf(fp[7], "%.4lf  %.4lf  %.4lf  %.4lf\n", t_usum, t_dsum, e_usum, e_dsum); 
  fprintf(fp[8], "%.4lf  %.4lf\n", psum, qsum); 
  fprintf(fp[9], "%.4lf\n", Psum);
  for(j = 5; j < 10; j++){
    fclose(fp[j]);
  }
#endif  
  free(fp);
#if !CLUSTER
  // print averaged final values
  printf("\nAvg: \t%.4lf \t%.4lf \t%.4lf \t%.4lf \t%.4lf \t%.4lf \t%.4lf \t%.4lf \t%.4lf  %.4lf  %.4lf  %.4lf  %.4lf  %.4lf\n", xmean[T/SKIP], ymean[T/SKIP], zmean[T/SKIP],  pmean[T/SKIP], qmean[T/SKIP], TUmean[T/SKIP], TDmean[T/SKIP], EDmean[T/SKIP], EDmean[T/SKIP], pi0mean[T/SKIP], pi1mean[T/SKIP], pi2mean[T/SKIP], Pmean[T/SKIP], Qmean[T/SKIP]);  
#endif
}

void plotDynamicsGraphs(FILE *gp, char *title, int datacolumn, char *xdata, char *pdata, char *pundata, char *gpdata)
{
  fprintf(gp, "stats '%s' using 2:3 prefix 'A' nooutput\n", xdata);
  fprintf(gp, "stats '%s' using 4 prefix 'B' nooutput\n", xdata);
  fprintf(gp, "stats '%s' using 2:3 prefix 'C' nooutput\n", pdata);
  fprintf(gp, "stats '%s' using 4 prefix 'D' nooutput\n", pdata);
  fprintf(gp, "stats '%s' using 2:3 prefix 'E' nooutput\n", gpdata);  
  fprintf(gp, "stats '%s' using 2:3 prefix 'F' nooutput\n", pundata);

  fprintf(gp, "set xlabel 'Time' \n");
  fprintf(gp, "set title ''\n");
  fprintf(gp, "set multiplot layout 4,1 title '%s' \n", title);    // set subplots layout  
  
  fprintf(gp, "unset autoscale y\n");
  fprintf(gp, "ymax = A_max_x\n");
  fprintf(gp, "if(A_max_y > A_max_x) {ymax = A_max_y}\n");  
  fprintf(gp, "if(ymax < B_max) {ymax = B_max}\n");
  fprintf(gp, "if(ymax <= 0.0) {ymax = 1.0}\n");
  fprintf(gp, "set format y \"%%.2f\"\n");
  fprintf(gp, "set ytics ymax/3 nomirror\n");
  fprintf(gp, "set yrange [0:ymax+ymax/10]\n");    
  fprintf(gp, "set key outside vertical height -1\n");  
  fprintf(gp, "set ylabel 'efforts' \n");  
  fprintf(gp, "plot for [col=2:%d] '%s' using 1:col with lines lw 2 title columnheader \n", datacolumn, xdata);
  fprintf(gp, "unset y2tics\n set ytics mirror\n");

  fprintf(gp, "set key outside vertical height -1\n");  
  fprintf(gp, "set ylabel 'payoff' \n");
  fprintf(gp, "ymax = C_max_x\n");
  fprintf(gp, "ymin = C_min_x\n");
  fprintf(gp, "if(C_max_y > C_max_x) {ymax = C_max_y}\n");
  fprintf(gp, "if(D_max > ymax) ymax = D_max\n");
  fprintf(gp, "if(C_min_y < C_min_x) {ymin = C_min_y}\n");
  fprintf(gp, "if(D_min < ymin) ymin = D_min\n");
  fprintf(gp, "yr = ymax-ymin\n");
  fprintf(gp, "set ytics yr/3 nomirror\n");
  fprintf(gp, "set autoscale y\n");  
  fprintf(gp, "set yrange [ymin:ymax+ymax/2]\n");
  fprintf(gp, "plot for [col=2:%d] '%s' using 1:col with lines lw 2 title columnheader \n", datacolumn, pdata);
  fprintf(gp, "unset autoscale y\n");
  
  fprintf(gp, "set key outside vertical height -1\n");  
  fprintf(gp, "set ylabel 'p & q' \n");
  fprintf(gp, "ymax = F_max_x\n");
  fprintf(gp, "if(F_max_y > F_max_x) {ymax = F_max_y}\n");
  fprintf(gp, "if(ymax < 0.05) {ymax = 1.0}\n");
  fprintf(gp, "set yrange [0:ymax+0.1]\n");
  fprintf(gp, "set format y \"%%.2f\"\n");
  fprintf(gp, "set ytics ymax/3 nomirror\n");
  fprintf(gp, "plot for [col=2:%d] '%s' using 1:col with lines lw 2 lc col title columnheader \n", 3, pundata);  
  
  fprintf(gp, "set ylabel 'P & Q' \n");
  fprintf(gp, "ymax = E_max_x\n");
  fprintf(gp, "if(E_max_y > E_max_x) {ymax = E_max_y}\n");
  fprintf(gp, "if(ymax < 0.05) {ymax = 1.0}\n");
  fprintf(gp, "set yrange [0:ymax+0.01]\n");
  fprintf(gp, "set format y \"%%.2f\"\n");
  fprintf(gp, "set ytics ymax/3 nomirror\n");
  fprintf(gp, "plot for [col=2:%d] '%s' using 1:col with lines lw 2 title columnheader \n", 3, gpdata);
  fprintf(gp, "unset multiplot \n");
}

void plotAverage(int m)
/*
 * m: 0 or 1; to save graphs as image file or not
 */
{ 
  char xdata[200], pdata[200], tdata[200], gpdata[200], pundata[200];
  char title[200], xpng[200], str[100];
  int datacolumn = 3+1;
  sprintf(str, "x.dat"); prep_file(xdata, str);
  sprintf(str, "p.dat"); prep_file(pdata, str);
  sprintf(str, "t.dat"); prep_file(tdata, str); 
  sprintf(str, "gp.dat"); prep_file(gpdata, str); 
  sprintf(str, "pun.dat"); prep_file(pundata, str); 
  
  FILE * gp = popen ("gnuplot -persistent", "w"); // open gnuplot in persistent mode
  sprintf(title, "b:%.1f, B:%.1f t_u:%.1f, t_d:%.1f, e_u:%.1f, e_d%.1f, c:%.1f,%.1f,%.1f, Vop:%d, Rho:%.2f, e:%.1f, E:%.1f, x0:%.2f, y0:%.2f, z0:%.2f, Y0:%.2f", b, B, Theta_u, Theta_d, Eta_u, Eta_d, cx, cy, cz, Vop, Rho, e, E, x_0, y_0, z_0, Y0);
  fprintf(gp, "set key outside vertical  spacing 1 width 1 height -2\n");        
  if(m){ // save graphs as file
    sprintf(xpng, "g%02dn%02db%0.2fB%.2ftu%.2ftd%.2feu%.2fed%.2fcx%.2fcy%.2fcz%.2fRho%.2fY0%.2fe%.2fE%.2fx0%.2fy0%.2fz0%.2fVop%d.png", G, n, b, B, Theta_u, Theta_d, Eta_u, Eta_d, cx, cy, cz, Rho, Y0, e, E, x_0, y_0, z_0, Vop); 
    fprintf(gp, "set term pngcairo size 1024,768 enhanced color solid font \"Helvetica,8\" \n");
    fprintf(gp, "set output '%s' \n", xpng);
  }
  else{
    fprintf(gp, "set term x11 dashed %d \n", 0);
  }
  fprintf(gp, "set lmargin at screen 0.1 \n");
  fprintf(gp, "set rmargin at screen 0.8 \n");
  fprintf(gp, "set label 1 'Average' at screen 0.12,0.99 center font \",13\"\n");  // label to indicate average  
  plotDynamicsGraphs(gp, title, datacolumn, xdata, pdata, pundata, gpdata);  
  fprintf(gp, "unset label 1\n");    
  fflush(gp); 
  pclose(gp);  
  
#if !CLUSTER
#if !ALLDATAFILE
  remove(xdata);
  remove(pdata);
  remove(tdata);
  remove(gpdata);
  remove(pundata);
#endif
#endif
}

void plotIndividualRun(int r, int m)
/*
 * r: run
 * m: 0 or 1; to save graphs as image file or not
 */
{
    // write data to file
  char xdata[200], pdata[200], tdata[200], gpdata[200], pundata[200];
  char title[200], xpng[200], str[100];
  int datacolumn = 3+1;
  sprintf(str, "x%d.dat", r); prep_file(xdata, str);
  sprintf(str, "p%d.dat", r); prep_file(pdata, str);
